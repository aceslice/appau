---
const title = Astro.props.title || "Akwaaba!";
import { SITE_TITLE, SITE_DESCRIPTION, SITE_HOST } from "../consts";
import background from "../assets/background.svg";
import Topnav from "../components/Topnav.astro";
import "../styles/global.css";
import { ClientRouter } from "astro:transitions";
const canonicalUrl = `https://${SITE_HOST}${Astro.url?.pathname ?? "/"}`;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/ace 1.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title} | {SITE_TITLE}</title>
    <meta name="description" content={SITE_DESCRIPTION} />
    <link rel="canonical" href={canonicalUrl} />
    <meta property="og:title" content={`${title} | ${SITE_TITLE}`} />
    <meta property="og:description" content={SITE_DESCRIPTION} />
    <meta property="og:type" content="website" />
    <meta property="og:url" content={canonicalUrl} />
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={`${title} | ${SITE_TITLE}`} />
    <meta name="twitter:description" content={SITE_DESCRIPTION} />
    
    <!-- Performance optimizations -->
    <link rel="dns-prefetch" href="//cdn.jsdelivr.net" />
    <link rel="dns-prefetch" href="//www.googletagmanager.com" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/css2?family=Caveat:wght@400;500;600;700&display=swap" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/css2?family=Satisfy&display=swap" rel="stylesheet" />
    
    <script type="application/ld+json">
      {
        "@context": "https://schema.org",
        "@type": "Person",
        "name": "Gideon Appau",
        "url": "https://appau.netlify.app",
        "description": "CS student and developer building real products",
        "jobTitle": "Software Developer & Student",
        "worksFor": {
          "@type": "Organization",
          "name": "Self-employed"
        },
        "alumniOf": {
          "@type": "EducationalOrganization",
          "name": "Takoradi Technical University"
        },
        "address": {
          "@type": "PostalAddress",
          "addressLocality": "Takoradi",
          "addressCountry": "Ghana"
        },
        "sameAs": [
          "https://github.com/aceslice",
          "https://x.com/theaceslice"
        ]
      }
    </script>
    
    <ClientRouter />
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-6DR42NTNSP"></script>
    <script>
      (window as any).dataLayer = (window as any).dataLayer || [];
      function gtag(...args: any[]){((window as any).dataLayer as any[]).push(args);}
      gtag('js', new Date());
      gtag('config', 'G-6DR42NTNSP', {
        page_title: document.title,
        page_location: window.location.href
      });
    </script>
  </head>

<body
  id="container"
  class="max-w-7xl md:max-w-6xl w-full border-l border-dashed border-r border-gray-200 p-2 md:p-12 lg:p-16"
  style="margin: 0 auto;"
>
  <img id="background" src={background.src} alt="" fetchpriority="high" aria-hidden="true" role="presentation" loading="eager" />

  <Topnav />
  <main id="main" role="main">
  <slot />
  </main>

  <!-- Global Music Player -->
  <div id="global-music-player" class="fixed bottom-6 right-6 z-50 opacity-0 pointer-events-none transition-all duration-300 transform translate-y-4">
    <div class="rounded-full border border-indigo-200 bg-gradient-to-r from-indigo-50/95 to-purple-50/95 backdrop-blur-2xl px-4 py-3 flex items-center gap-3 shadow-lg shadow-indigo-200/30">
      <div class="relative w-10 h-10" id="global-circle">
        <svg class="w-10 h-10 -rotate-90" viewBox="0 0 40 40">
          <circle cx="20" cy="20" r="18" stroke="rgb(228 228 231)" stroke-width="2" fill="none"/>
          <circle cx="20" cy="20" r="18" stroke="rgb(251 191 36)" stroke-width="2" fill="none" 
                  stroke-dasharray="113.1" stroke-dashoffset="113.1" id="global-progress" 
                  style="transition: stroke-dashoffset 0.1s ease"/>
        </svg>
        <button type="button" class="absolute inset-0 flex items-center justify-center text-zinc-700 hover:text-zinc-900 focus:outline-none"
                aria-label="Play" id="global-toggle">
          <span class="text-sm">▶</span>
        </button>
      </div>
      <div class="min-w-0">
        <div class="text-sm font-medium text-indigo-800 truncate" id="global-title">Now playing</div>
        <div class="text-[11px] text-indigo-600 truncate" id="global-artist" style="display: none;"></div>
      </div>
      <button type="button" class="ml-2 text-zinc-500 hover:text-zinc-700 focus:outline-none"
              aria-label="Close" id="global-close">
        <span class="text-sm">×</span>
      </button>
    </div>
  </div>
  
  <audio id="global-audio" preload="none" hidden></audio>
</body>
</html>
<style is:global>
  @import url("https://fonts.googleapis.com/css2?family=Bricolage+Grotesque:wght@400..800&display=swap");
  * {
    font-family: "Bricolage Grotesque", sans-serif;
  }
  body {
    font-size: 16px;
    line-height: 1.5;
    color: #333;
    margin: 0;
  }
  #background {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -1;
    filter: blur(700px);
  }
</style>

<script>
  // Global Music Player State
  (window as any).GlobalMusicPlayer = {
    audio: null,
    playlist: [],
    currentIndex: 0,
    isPlaying: false,
    
    init() {
      this.audio = document.getElementById('global-audio');
      if (!this.audio) return;
      
      this.setupEventListeners();
      this.loadFromStorage();
    },
    
    setupEventListeners() {
      const toggle = document.getElementById('global-toggle');
      const close = document.getElementById('global-close');
      const circle = document.getElementById('global-circle');
      
      toggle?.addEventListener('click', () => this.togglePlay());
      close?.addEventListener('click', () => this.stop());
      circle?.addEventListener('click', (e) => this.seek(e));
      
      this.audio.addEventListener('timeupdate', () => this.updateProgress());
      this.audio.addEventListener('loadedmetadata', () => this.updateProgress());
      this.audio.addEventListener('ended', () => this.nextTrack());
    },
    
    playTrack(track: any) {
      if (!this.audio) return;
      this.audio.src = track.src;
      this.updateDisplay(track);
      this.audio.play().catch((error: any) => {
        console.warn('Play failed:', error);
        this.isPlaying = false;
        this.updateButton();
      });
      this.isPlaying = true;
      this.showPlayer();
      this.updateButton();
    },
    
    togglePlay() {
      if (!this.audio) return;
      if (this.audio.paused) {
        this.audio.play().catch((error: any) => {
          console.warn('Play failed:', error);
          this.isPlaying = false;
          this.updateButton();
        });
        this.isPlaying = true;
        this.showPlayer();
      } else {
        this.audio.pause();
        this.isPlaying = false;
      }
      this.updateButton();
    },
    
    stop() {
      if (!this.audio) return;
      this.audio.pause();
      this.isPlaying = false;
      this.hidePlayer();
      this.updateButton();
    },
    
    nextTrack() {
      if (this.playlist.length <= 1) {
        this.stop();
        return;
      }
      this.currentIndex = (this.currentIndex + 1) % this.playlist.length;
      const track = this.playlist[this.currentIndex];
      this.playTrack(track);
    },
    
    updateDisplay(track: any) {
      const title = document.getElementById('global-title');
      const artist = document.getElementById('global-artist');
      
      if (title) title.textContent = track.title;
      if (artist) {
        if (track.artist) {
          artist.textContent = track.artist;
          artist.style.display = '';
        } else {
          artist.style.display = 'none';
        }
      }
    },
    
    updateProgress() {
      const progress = document.getElementById('global-progress');
      if (!progress || !this.audio) return;
      
      const p = this.audio.duration ? (this.audio.currentTime / this.audio.duration) : 0;
      const offset = 113.1 * (1 - p);
      progress.style.strokeDashoffset = String(offset);
    },
    
    updateButton() {
      const toggle = document.getElementById('global-toggle');
      if (!toggle) return;
      
      toggle.textContent = this.isPlaying ? '❚❚' : '▶';
      toggle.setAttribute('aria-label', this.isPlaying ? 'Pause' : 'Play');
    },
    
    showPlayer() {
      const player = document.getElementById('global-music-player');
      if (!player) return;
      
      player.style.opacity = '1';
      player.style.pointerEvents = 'auto';
      player.style.transform = 'translateY(0)';
    },
    
    hidePlayer() {
      const player = document.getElementById('global-music-player');
      if (!player) return;
      
      player.style.opacity = '0';
      player.style.pointerEvents = 'none';
      player.style.transform = 'translateY(1rem)';
    },
    
    seek(e: any) {
      if (!this.audio || !this.audio.duration) return;
      
      const rect = e.currentTarget.getBoundingClientRect();
      const centerX = rect.left + rect.width / 2;
      const centerY = rect.top + rect.height / 2;
      const angle = Math.atan2(e.clientY - centerY, e.clientX - centerX) + Math.PI / 2;
      const normalizedAngle = (angle + Math.PI) / (2 * Math.PI);
      this.audio.currentTime = normalizedAngle * this.audio.duration;
    },
    
    loadFromStorage() {
      const saved = localStorage.getItem('global-music-state');
      if (saved) {
        try {
          const state = JSON.parse(saved);
          if (state.playlist && state.currentIndex !== undefined) {
            this.playlist = state.playlist;
            this.currentIndex = state.currentIndex;
            // Load the track but don't auto-play - wait for user interaction
            if (this.playlist.length > 0) {
              const track = this.playlist[this.currentIndex];
              this.audio.src = track.src;
              this.updateDisplay(track);
              this.showPlayer();
              // Always set isPlaying to false on page load - user must click play
              this.isPlaying = false;
              this.updateButton();
            }
          }
        } catch (e) {
          console.warn('Failed to load music state:', e);
        }
      }
    },
    
    saveToStorage() {
      const state = {
        playlist: this.playlist,
        currentIndex: this.currentIndex,
        isPlaying: this.isPlaying
      };
      localStorage.setItem('global-music-state', JSON.stringify(state));
    }
  };
  
  // Initialize when DOM is ready
  document.addEventListener('DOMContentLoaded', () => {
    (window as any).GlobalMusicPlayer.init();
  });
  
  // Save state periodically
  setInterval(() => {
    if ((window as any).GlobalMusicPlayer) {
      (window as any).GlobalMusicPlayer.saveToStorage();
    }
  }, 1000);
</script>
